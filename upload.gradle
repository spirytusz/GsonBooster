apply plugin: 'maven-publish'
apply plugin: 'signing'

def loadUploadProperties() {
    Properties properties = new Properties()
    if (project.rootProject.file('local.properties').exists()) {
        println(">>>>> find local.properties")
        properties.load(new FileInputStream(project.rootProject.file("local.properties")))
    } else {
        println(">>>>> Not find local.properties, use gradle.properties instead")
        properties.load(new FileInputStream(project.rootProject.file("gradle.properties")))
    }
    properties.forEach { k, v ->
        println(">>>>> fetch properties $k=$v")
        project.ext[k] = v
    }
}

loadUploadProperties()

task sourcesJar(type: Jar) {
    if (project.hasProperty('android')) {
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.allSource
    }
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

def hasSigningKeyId = project.hasProperty("signing.keyId")
def hasSigningPassword = project.hasProperty("signing.password")
def hasSecretKeyRingFile = project.hasProperty("signing.secretKeyRingFile")

if (hasSigningKeyId && hasSigningPassword && hasSecretKeyRingFile) {
    signing {
        sign publishing.publications
    }
} else {
    println(">>>>> Not found sign info <<<<<")
    println(">>>>> hasSigningKeyId: $hasSigningKeyId <<<<<")
    println(">>>>> hasSigningPassword: $hasSigningPassword <<<<<")
    println(">>>>> hasSecretKeyRingFile: $hasSecretKeyRingFile <<<<<")
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'utf-8')
    options.addStringOption('charSet', 'utf-8')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar

            groupId = MAVEN_GROUP_ID
            artifactId = MAVEN_ARTIFACT_ID
            version = MAVEN_VERSION
            from components.java
            println(">>>>> groupId=[$groupId] artifactId=[$artifactId] version=[$version] <<<<<")

            pom {
                name = MAVEN_NAME
                description = MAVEN_POM_DESCRIPTION
                url = 'https://github.com/zkw012300/GsonBooster'
                developers {
                    developer {
                        name = 'ZSpirytus'
                        email = 'zhangwel26171@gmail.com'
                    }
                }
                licenses {
                    license {
                        name = 'MIT License'
                    }
                }
                scm {
                    url = 'https://github.com/zkw012300/GsonBooster'
                    connection = 'scm:git:git://github.com/zkw012300/GsonBooster.git'
                    developerConnection = 'scm:git:ssh://git@github.com:zkw012300/GsonBooster.git'
                }
            }
        }
    }
    repositories {
        def hasUsername = project.hasProperty("nexus.username")
        def hasPassword = project.hasProperty("nexus.password")
        if (!hasUsername || !hasPassword) {
            println(">>>>> Not found username or password <<<<<")
            println(">>>>> hasUsername: $hasUsername <<<<<")
            println(">>>>> hasPassword: $hasPassword <<<<<")
            return
        }
        maven {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                String nexusUserName = project["nexus.username"]
                String nexusPassword = project["nexus.password"]
                println(">>>>> upload.user[$nexusUserName] pw[$nexusPassword] <<<<<")

                username nexusUserName
                password nexusPassword
            }
        }
    }
}